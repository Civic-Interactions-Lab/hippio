"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7642],{95857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var s=t(74848),a=t(28453);const r={sidebar_position:5},o="Class Diagrams",i={id:"system-architecture/class-diagrams",title:"Class Diagrams",description:"Backend",source:"@site/docs/system-architecture/class-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/class-diagrams",permalink:"/hippio/docs/system-architecture/class-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Civic-Interactions-Lab/hippio/edit/main/documentation/docs/system-architecture/class-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Manan Patel",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Sequence Diagrams",permalink:"/hippio/docs/system-architecture/sequence-diagrams"},next:{title:"Development Environment",permalink:"/hippio/docs/system-architecture/development-environment"}},c={},d=[{value:"Backend",id:"backend",level:2},{value:"Relationships",id:"relationships",level:3},{value:"Frontend",id:"frontend",level:2},{value:"Relationships",id:"relationships-1",level:3}];function l(e){const n={h1:"h1",h2:"h2",h3:"h3",mermaid:"mermaid",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"class-diagrams",children:"Class Diagrams"}),"\n",(0,s.jsx)(n.h2,{id:"backend",children:"Backend"}),"\n",(0,s.jsx)(n.mermaid,{value:'classDiagram\n    direction RL\n\n    class WebSocketServer {\n        +httpServer: http.Server\n        +wss: WebSocket.Server\n        +sessions: Map~string, Session~\n        +setupDatabase()\n        +broadcast(sessionId, data)\n        +onConnection(ws)\n        +handleUpgrade(request, socket, head)\n        +listen(port)\n    }\n\n    class Session {\n        +sessionId: string\n        +clients: Set~Client~\n        +scores: Map~string, number~\n        +fruitQueue: Food[]\n        +activeFoods: FoodInstance[]\n        +gameMode: string\n        +currentTargetFoodId: string\n        +currentTargetEffect: string\n        +fruitInterval: Interval\n        +startGame(mode)\n        +enqueueFood(food)\n        +handlePlayerAction(action)\n        +broadcastState()\n    }\n\n    class Client {\n        +userId: string\n        +role: string\n        +color: string\n        +edge: string\n        +ws: WebSocket\n        +send(data)\n    }\n\n    class FoodInstance {\n        +instanceId: string\n        +foodId: string\n        +x: number\n        +y: number\n        +vx: number\n        +vy: number\n        +effect: string\n    }\n\n    class DatabaseService {\n        <<PostgreSQL>>\n        +pool: Pool\n        +setupTables()\n        +saveSession(sessionId)\n        +addPlayer(sessionId, userId, role)\n        +removePlayer(sessionId, userId)\n        +sessionExists(sessionId)\n    }\n\n    WebSocketServer "1" *-- "*" Session : manages\n    Session "1" *-- "*" Client : tracks\n    Session "1" o-- "*" FoodInstance : spawns\n    WebSocketServer ..> DatabaseService : persists'}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Figure 1."})," This diagram illustrates the architecture of our current backend service."]}),"\n",(0,s.jsx)(n.h3,{id:"relationships",children:"Relationships"}),"\n",(0,s.jsx)(n.p,{children:"The primary entry point is the WebSocketServer, which is responsible for managing all active game rooms. For each game, it creates and holds a Session instance."}),"\n",(0,s.jsx)(n.p,{children:"Each Session encapsulates the entire state and logic for a single game. It contains the set of connected Client objects and tracks all activeFoods, the fruitQueue, and player scores. The startGame and handlePlayerAction methods contain the core game logic, and a central game loop broadcasts the state to all players. A FoodInstance represents a specific food item currently on screen, with its own position and velocity. Each FoodInstance is an instance of a static Food object, which simply holds the food's name and ID."}),"\n",(0,s.jsx)(n.p,{children:"For production, the WebSocketServer uses the DatabaseService to save and load session and player data, ensuring data is persisted."}),"\n",(0,s.jsx)(n.h2,{id:"frontend",children:"Frontend"}),"\n",(0,s.jsx)(n.mermaid,{value:"classDiagram\n  direction TB\n\n  class App {\n    +<Routes> BrowserRouter\n  }\n\n  class WebSocketContext {\n    +isConnected: boolean\n    +connectedUsers: User[]\n    +lastMessage: Message\n    +sendMessage(message)\n    +resetGameState()\n    +clearLastMessage()\n  }\n\n  class AacInterface {\n    +selectedItem: AacFood\n    +selectedCategory: string\n    +activeVerb: AacVerb\n    +handleFoodClick(food)\n    +handleVerbClick(verb)\n    +handleCategoryClick(category)\n  }\n\n  class PhaserGame {\n    +ref: game, scene\n    +currentActiveScene(scene)\n  }\n\n  class Game {\n    +players: Map~string, Hippo~\n    +foods: Group\n    +addPlayer()\n    +setTargetFood(foodId, effect)\n    +applyModeSettings(settings)\n    +update()\n  }\n\n  class Hippo {\n    +targetX: number\n    +targetY: number\n    +freeze(duration)\n    +updatePointerFlip()\n    +snapToEdge(edge)\n    +setTargetPosition(x, y)\n    +update()\n  }\n\n  class MoveStrategy {\n    <<interface>>\n    +update(sprite, cursors)\n  }\n\n  class EdgeSlideStrategy {\n    +update()\n  }\n\n  class WalkStrategy {\n    +update()\n  }\n\n  class JumpStrategy {\n    +update()\n  }\n\n  class Presenter {\n    +handleStartGame()\n    +cycleMode()\n  }\n\n  class RoleSelect {\n    +handleRoleSelect(role)\n    +handleColorSelect(color)\n    +handleStart()\n  }\n\n  class PhaserPage {\n    +phaserRef: PhaserGame\n    +currentFood: AacFood\n    +setCurrentFood()\n    +setScores()\n    +sendMessage()\n  }\n\n  class Victory {\n    +scores: Map~string, number~\n    +handlePlayAgain()\n  }\n\n  class Storage {\n    +updatePlayerInSessionStorage()\n  }\n\n  class Foods {\n    +AAC_DATA: AacData\n    +AAC_VERBS: AacVerb[]\n  }\n\n  class EventBus {\n    +emit(event, data)\n    +on(event, handler)\n    +off(event, handler)\n  }\n\n  class Leaderboard {\n    +scores: Record<string, number>\n    +colors: Record<string, string>\n    +userId: string\n  }\n\n  class MovementStore {\n    +subscribe(listener)\n    +unsubscribe(listener)\n    +notifyMove(payload)\n  }\n\n  %% Relationships\n  App --\x3e WebSocketContext\n  App --\x3e PhaserPage\n  App --\x3e AacInterface\n  App --\x3e Presenter\n  App --\x3e RoleSelect\n  App --\x3e Victory\n\n  WebSocketContext --\x3e EventBus\n  WebSocketContext --\x3e MovementStore\n\n  AacInterface --\x3e EventBus\n  AacInterface --\x3e Foods\n  AacInterface --\x3e WebSocketContext : uses\n\n  PhaserGame --\x3e Game\n  PhaserPage --\x3e PhaserGame\n  PhaserPage --\x3e WebSocketContext : uses\n  PhaserPage --\x3e EventBus : listens\n  PhaserPage --\x3e Leaderboard\n\n  Game --\x3e Hippo : creates\n  Game --\x3e MovementStore\n  Hippo --\x3e MoveStrategy\n  MoveStrategy <|.. EdgeSlideStrategy\n  MoveStrategy <|.. WalkStrategy\n  MoveStrategy <|.. JumpStrategy\n\n  RoleSelect --\x3e Storage\n  RoleSelect --\x3e WebSocketContext\n  Presenter --\x3e WebSocketContext\n  Victory --\x3e WebSocketContext\n  Victory --\x3e EventBus\n\n"}),"\n",(0,s.jsx)(n.h3,{id:"relationships-1",children:"Relationships"}),"\n",(0,s.jsx)(n.p,{children:"Starts at the App component, which wraps the entire application in a WebSocketProvider and defines the routing for all gameplay views. Each route represents a distinct user page tied to the player's current role in the session."}),"\n",(0,s.jsx)(n.p,{children:"PhaserPage mounts the PhaserGame wrapper, which instantiates the Game scene which manages game physics, player movement, collision, and food effects. Each player is represented by a Hippo object, whose movement behavior is controlled by MoveStrategy implementations like EdgeSlideStrategy, WalkStrategy, or JumpStrategy."}),"\n",(0,s.jsx)(n.p,{children:"Communication between components and game is done through the EventBus and WebSocketContext, which listen for updates and synchronizes state across the network. The MovementStore allows syncing of player position. The Foods module provides access to the AAC vocabulary, while Storage handles session reloads. UI components like Leaderboard, Victory give feedback tied to game state."})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const a={},r=s.createContext(a);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);