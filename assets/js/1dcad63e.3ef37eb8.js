"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2994],{95156:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(74848),r=t(28453);const s={sidebar_position:4},o="Sequence Diagrams",i={id:"system-architecture/sequence-diagrams",title:"Sequence Diagrams",description:"Use Case 1 - Start Game Session (Host)",source:"@site/docs/system-architecture/sequence-diagrams.md",sourceDirName:"system-architecture",slug:"/system-architecture/sequence-diagrams",permalink:"/hippio/docs/system-architecture/sequence-diagrams",draft:!1,unlisted:!1,editUrl:"https://github.com/Civic-Interactions-Lab/hippio/edit/main/documentation/docs/system-architecture/sequence-diagrams.md",tags:[],version:"current",lastUpdatedBy:"Manan Patel",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Mockups (Gameplay Design)",permalink:"/hippio/docs/system-architecture/mockups"},next:{title:"Class Diagrams",permalink:"/hippio/docs/system-architecture/class-diagrams"}},c={},l=[{value:"Use Case 1 - Start Game Session (Host)",id:"use-case-1---start-game-session-host",level:2},{value:"Use Case 2 \u2013 Join Game Session (Hippo Player or AAC User)",id:"use-case-2--join-game-session-hippo-player-or-aac-user",level:2},{value:"Use Case 3 \u2013 Start Game (Host)",id:"use-case-3--start-game-host",level:2},{value:"Use Case 4 \u2013 Control Food Queue (AAC User)",id:"use-case-4--control-food-queue-aac-user",level:2},{value:"Use Case 5 \u2013 Eats Food (Player)",id:"use-case-5--eats-food-player",level:2},{value:"Use Case 6 \u2013 Game Timer and End State (Host)",id:"use-case-6--game-timer-and-end-state-host",level:2},{value:"Use Case 7 \u2013 Play Again (AAC User or Player)",id:"use-case-7--play-again-aac-user-or-player",level:2}];function d(e){const n={em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"sequence-diagrams",children:"Sequence Diagrams"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-1---start-game-session-host",children:"Use Case 1 - Start Game Session (Host)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As a host, I want to initiate a new game session from my device, so that players can join."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The host opens the game and chooses to start a new session."}),"\n",(0,a.jsx)(n.li,{children:"A unique game code and QR code is created and shown on their screen."}),"\n",(0,a.jsx)(n.li,{children:"The host shares this code (or QR code) with those who want to join."}),"\n",(0,a.jsx)(n.li,{children:"As players join the game, their hippo avatars and roles appear on the host\u2019s screen."}),"\n",(0,a.jsx)(n.li,{children:"Once at least one AAC user and one hippo player have joined, the host can begin the game.inputs."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram \u2013 Start Game Session (Host)\n---\n\nsequenceDiagram\n    actor Host\n    participant HostClient\n    participant Server\n    participant PlayerClient\n    actor Player\n\n    Host ->> HostClient: \u201cCreate new game\u201d\n    HostClient ->> Server: POST /sessions\n    activate Server\n    Server ->> Server: Generate game code + QR\n    Server --\x3e> HostClient: code + QR\n    deactivate Server\n\n    HostClient --\x3e> Host: Display code + QR\n    Host --\x3e> Player: Share code / QR\n\n    loop Each player joins\n        Player ->> PlayerClient: Enter code\n        PlayerClient ->> Server: Join <code>\n        Server ->> Server: Register player & assign role\n        Server --\x3e> HostClient: New avatar + role\n        HostClient --\x3e> Host: Update lobby\n    end\n\n    Server --\x3e> HostClient: AAC + Hippo present\n    HostClient --\x3e> Host: \u201cStart game?\u201d prompt\n    Host ->> HostClient: Click \u201cBegin\u201d\n    HostClient ->> Server: start_game\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-2--join-game-session-hippo-player-or-aac-user",children:"Use Case 2 \u2013 Join Game Session (Hippo Player or AAC User)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As a hippo player or AAC User, I want to join a game session using a code so that I can play the game."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"A player opens the game on their device."}),"\n",(0,a.jsx)(n.li,{children:"They enter or scan the game code that was shared by the host."}),"\n",(0,a.jsx)(n.li,{children:"They choose a role: Hippo Player or AAC User"}),"\n",(0,a.jsx)(n.li,{children:"Hippo Players also choose a hippo color."}),"\n",(0,a.jsx)(n.li,{children:"Once joined, they wait until the host starts the game."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram 2 - Join Game Session\n---\n\nsequenceDiagram\n    actor Host\n    actor Player\n\n    participant HostClient\n    participant PlayerClient\n    participant Server\n\n    Host ->> HostClient: Code + QR on-screen\n    HostClient --\x3e> Host: Displayed\n    Host --\x3e> Player: Share code / QR\n\n    Player ->> PlayerClient: Launch app, enter code\n    PlayerClient ->> Server: VALIDATE_SESSION\n    Server --\x3e> PlayerClient: SESSION_VALIDATED\n\n    alt Role = Hippo Player\n        Player ->> PlayerClient: Select \u201cHippo\u201d\n        PlayerClient ->> Server: PLAYER_JOIN\n        Server --\x3e> PlayerClient: \u201cPick color\u201d\n        Player ->> PlayerClient: Choose color\n        PlayerClient ->> Server: COLOR_UPDATED\n    else Role = AAC User\n        Player ->> PlayerClient: Select \u201cAAC User\u201d\n        PlayerClient ->> Server: PLAYER_JOIN\n    end\n\n    Server --\x3e> PlayerClient: Lobby state\n    PlayerClient --\x3e> Player: Waiting for host\u2026\n\n\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-3--start-game-host",children:"Use Case 3 \u2013 Start Game (Host)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As a host, I want to start the game after players have joined so that everyone can begin playing."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:'The Host Player sees a "Start Game" button on their game interface.'}),"\n",(0,a.jsx)(n.li,{children:'The Host Player taps "Start Game".'}),"\n",(0,a.jsx)(n.li,{children:"The Host Player's client sends a start_game command to the backend via WebSocket."}),"\n",(0,a.jsx)(n.li,{children:"The backend updates the central game state in PostgreSQL to state = 'playing'."}),"\n",(0,a.jsx)(n.li,{children:"The backend broadcasts the updated game state (playing) to all connected clients via WebSocket."}),"\n",(0,a.jsx)(n.li,{children:"All clients (Host, AAC User, and Other Players) immediately switch to the gameplay screen and the game begins for everyone at the same time."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram 3 \u2013 Start Game (No Countdown)\n---\n\nsequenceDiagram\n    participant Host_Player  as Host Player\n    participant AAC_User     as AAC User\n    participant Other_Player as Other Player\n    participant Interface    as Game Interface (Client Apps)\n    participant WS_Server    as Backend WebSocket Server\n    participant DB           as PostgreSQL DB\n\n    %% \u2500\u2500\u2500 Host starts the game \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Host_Player ->> Interface: Sees \u201cStart Game\u201d button\n    Host_Player ->> Interface: Taps \u201cStart Game\u201d\n\n    %% \u2500\u2500\u2500 Command sent to backend \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    Interface   ->> WS_Server: WebSocket: start_game command\n    WS_Server   ->> DB       : UPDATE games SET state='playing' WHERE id=...\n\n    %% \u2500\u2500\u2500 State broadcast to all clients \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    WS_Server  --\x3e> Interface : WebSocket: state = playing\n    Interface  ->> Host_Player  : Display gameplay screen\n    Interface  ->> AAC_User     : Display gameplay screen\n    Interface  ->> Other_Player : Display gameplay screen\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-4--control-food-queue-aac-user",children:"Use Case 4 \u2013 Control Food Queue (AAC User)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As an AAC user, I want to control the food in the queue so that I can challenge players."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"During the game, the AAC user sees a menu of foods they can pick from."}),"\n",(0,a.jsx)(n.li,{children:"They tap the foods they want the other players to go after."}),"\n",(0,a.jsx)(n.li,{children:"They can also choose a special effect, like Freeze or Grow"}),"\n",(0,a.jsx)(n.li,{children:"The foods they picked becomes the new target for all the hippos playing."}),"\n",(0,a.jsx)(n.li,{children:"The chosen food appears on screen, and players try to catch it with their hippos."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram 4 \u2013 Control Food Queue\n---\n\nsequenceDiagram\n    actor AAC_User as AAC User\n    participant AAC_Interface as AAC Interface\n    participant WebSocket_Client as WebSocket Context\n    participant WebSocket_Server as WebSocket Server\n    participant Phaser_Scene as Game Scene\n    participant Spectator_UI as Spectator View\n\n    AAC_User->>AAC_Interface: Select food and (optionally) effect\n    AAC_Interface->>WebSocket_Client: sendMessage('AAC_FOOD_SELECTED', payload)\n    WebSocket_Client->>WebSocket_Server: WebSocket \u2192 AAC_FOOD_SELECTED\n\n    WebSocket_Server->>WebSocket_Server: Update targetFoodId and effect\n    WebSocket_Server->>WebSocket_Server: Unshift food into queue\n\n    WebSocket_Server--\x3e>WebSocket_Client: AAC_TARGET_FOOD\n    WebSocket_Client--\x3e>Phaser_Scene: Emit setTargetFood\n    WebSocket_Client--\x3e>Spectator_UI: Emit setTargetFood\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-5--eats-food-player",children:"Use Case 5 \u2013 Eats Food (Player)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As a player, I want to move my hippo on my side and eat the correct food so that I can earn points."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Food spawn out from the center of the screen toward each hippo player."}),"\n",(0,a.jsx)(n.li,{children:"The screen shows which food the AAC user has selected as the target."}),"\n",(0,a.jsx)(n.li,{children:"The player moves their hippo along their edge of the screen to try to catch that food."}),"\n",(0,a.jsx)(n.li,{children:"If they catch the correct food, they earn a point \u2014 and may receive a bonus effect like growing bigger."}),"\n",(0,a.jsx)(n.li,{children:"If they catch the wrong food, they may lose a point or trigger a penalty like being frozen."}),"\n",(0,a.jsx)(n.li,{children:"The game continues until the timer runs out."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram 5 \u2013 Eats Food\n---\n\nsequenceDiagram\n    actor Hippo_Player as Hippo Player\n    participant Phaser_Scene as Game Scene\n    participant WebSocket_Client as WebSocket Context\n    participant WebSocket_Server as WebSocket Server\n    participant Spectator_UI as Spectator View\n\n    Hippo_Player->>Phaser_Scene: Move hippo toward food\n    Phaser_Scene->>Phaser_Scene: Detect collision with food\n\n    alt Collision with correct food\n        Phaser_Scene->>Phaser_Scene: Apply effect (e.g. freeze, grow)\n        Phaser_Scene->>WebSocket_Client: sendMessage('FRUIT_EATEN_BY_PLAYER')\n        Phaser_Scene->>WebSocket_Client: sendMessage('FRUIT_EATEN', instanceId)\n    else Collision with incorrect food\n        Phaser_Scene->>WebSocket_Client: sendMessage('FRUIT_EATEN_BY_PLAYER')\n    end\n\n    WebSocket_Client->>WebSocket_Server: Forward score update and food removal\n    WebSocket_Server->>WebSocket_Server: Update scores\n\n    WebSocket_Server--\x3e>WebSocket_Client: SCORE_UPDATE_BROADCAST\n    WebSocket_Client--\x3e>Phaser_Scene: Emit scoreUpdate\n    WebSocket_Client--\x3e>Spectator_UI: Emit scoreUpdate\n\n    WebSocket_Server--\x3e>WebSocket_Client: REMOVE_FOOD\n    WebSocket_Client--\x3e>Phaser_Scene: Emit removeFruit\n    WebSocket_Client--\x3e>Spectator_UI: Emit removeFruit\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-6--game-timer-and-end-state-host",children:"Use Case 6 \u2013 Game Timer and End State (Host)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As a player or AAC user, I want the game to end automatically after 3 minute so we know when the round is over."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The host starts the game. (See Use Case 3.)"}),"\n",(0,a.jsx)(n.li,{children:"The backend WebSocket server starts the timer and tracks the countdown for the game session."}),"\n",(0,a.jsx)(n.li,{children:"When the timer reaches 0, the backend sets the game state in PostgreSQL to ended."}),"\n",(0,a.jsx)(n.li,{children:"The backend broadcasts the game end and scores to all clients via WebSocket."}),"\n",(0,a.jsx)(n.li,{children:"A score screen is shown to all players."}),"\n",(0,a.jsx)(n.li,{children:"The host sees a \u201cPlay Again\u201d or \u201cEnd Game\u201d option."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Sequence Diagram 6 \u2013 Game Timer and End State (Backend Timer Activity)\n---\nsequenceDiagram\nparticipant Host as Host Player\nparticipant Game_UI as Game UI (Client)\nparticipant WS_Server as WebSocket Server (Backend)\nparticipant DB as PostgreSQL DB\nparticipant Timer as Timer (Backend Activity)\nparticipant All_Players as All Players\n\nHost->>Game_UI: Open timer selection screen\nGame_UI--\x3e>Host: Show default timer (180 seconds)\nHost->>Game_UI: Adjust timer (optional)\nHost->>Game_UI: Start game\nGame_UI->>WS_Server: WebSocket: start_game with timer value\n\nWS_Server->>DB: UPDATE games SET state='playing', timer=VALUE\nWS_Server->>Timer: Start timer for session (timer value)\n\nalt Each second\n    Timer--\x3e>WS_Server: Timer tick (current time left)\n    WS_Server--\x3e>Game_UI: WebSocket: timer tick\nend\n\nTimer--\x3e>WS_Server: Timer reached 0\nWS_Server->>DB: UPDATE games SET state='ended'\nWS_Server--\x3e>Game_UI: WebSocket: state=ended, final scores\nGame_UI->>All_Players: Show score screen\nGame_UI->>Host: Show \u201cPlay Again\u201d or \u201cEnd Game\u201d options\n"}),"\n",(0,a.jsx)(n.h2,{id:"use-case-7--play-again-aac-user-or-player",children:"Use Case 7 \u2013 Play Again (AAC User or Player)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.em,{children:"As an AAC user or player, I want to play another game session after a round ends."})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"After the game ends, if the host taps or uses audio to \u201cPlay Again\u201d, go to Use Case 3."}),"\n",(0,a.jsx)(n.li,{children:"If the host taps or uses audio to \u201cEnd Game\u201d, all users are redirected to the game homescreen."}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:'---\ntitle: Sequence Diagram \u2013 Play Again Option (WebSocket + PostgreSQL)\n---\n\nsequenceDiagram\nparticipant Host as Host Player\nparticipant Game_UI as Game UI (Client)\nparticipant WS_Server as WebSocket Server (Backend)\nparticipant DB as PostgreSQL DB\nparticipant All_Players as All Players\n\nalt Host chooses "Play Again"\n    Host->>Game_UI: Tap/voice "Play Again"\n    Game_UI->>WS_Server: WebSocket: play_again\n    WS_Server->>DB: Reset game state for new round\n    WS_Server--\x3e>Game_UI: WebSocket: state = lobby / ready\n    Game_UI->>All_Players: Go to Use Case 3 (Start New Game)\nelse Host chooses "End Game"\n    Host->>Game_UI: Tap/voice "End Game"\n    Game_UI->>WS_Server: WebSocket: end_game\n    WS_Server--\x3e>Game_UI: WebSocket: end_session\n    Game_UI->>All_Players: Redirect to game home screen\nend'})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);