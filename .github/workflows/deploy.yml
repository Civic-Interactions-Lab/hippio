# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
name: Deploy Docs

on:
  workflow_run:
    workflows:
      - "Run Vitest for Hungry Hippo Game"
    types:
      - completed

permissions:
  actions: read
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
#    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure jq and unzip are available
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Download coverage-report artifact from tests workflow
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          RUN_ID=${{ github.event.workflow_run.id }}
          echo "Fetching artifacts for workflow run: $RUN_ID"
          API_URL="https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/artifacts"

          ART_JSON=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$API_URL")
          ART_URL=$(echo "$ART_JSON" | jq -r '.artifacts[] | select(.name=="coverage-report") | .archive_download_url')

          if [ -z "$ART_URL" ] || [ "$ART_URL" = "null" ]; then
            echo "coverage-report artifact not found on workflow run $RUN_ID"
            exit 1
          fi

          echo "Downloading artifact from: $ART_URL"
          mkdir -p documentation/static/coverage
          curl -L -H "Authorization: Bearer $GITHUB_TOKEN" -o /tmp/coverage.zip "$ART_URL"
          unzip -o /tmp/coverage-report.zip -d documentation/static/coverage

      - name: Install
        run: cd documentation && yarn install

      - name: Deploy
        run: |
          export ORG_NAME=$(echo ${GITHUB_REPOSITORY%/*})
          export PROJECT_NAME=$(echo ${GITHUB_REPOSITORY#*/})
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          cd documentation && NODE_ENV="production" GIT_USER="github-actions[bot]" GIT_PASS="${{ secrets.GITHUB_TOKEN }}" yarn deploy
